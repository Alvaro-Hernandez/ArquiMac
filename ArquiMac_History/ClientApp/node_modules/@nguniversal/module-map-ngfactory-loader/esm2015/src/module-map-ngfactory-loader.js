/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, InjectionToken, Inject, Compiler } from '@angular/core';
/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 * @type {?}
 */
import * as ɵngcc0 from '@angular/core';
export const MODULE_MAP = new InjectionToken('MODULE_MAP');
/**
 * NgModuleFactoryLoader which does not lazy load
 */
export class ModuleMapNgFactoryLoader {
    /**
     * @param {?} compiler
     * @param {?} moduleMap
     */
    constructor(compiler, moduleMap) {
        this.compiler = compiler;
        this.moduleMap = moduleMap;
    }
    /**
     * @param {?} loadChildrenString
     * @return {?}
     */
    load(loadChildrenString) {
        /** @type {?} */
        const offlineMode = this.compiler instanceof Compiler;
        /** @type {?} */
        const type = this.moduleMap[loadChildrenString];
        if (!type) {
            throw new Error(`${loadChildrenString} did not exist in the MODULE_MAP`);
        }
        return offlineMode ?
            this.loadFactory((/** @type {?} */ (type))) : this.loadAndCompile((/** @type {?} */ (type)));
    }
    /**
     * @private
     * @param {?} factory
     * @return {?}
     */
    loadFactory(factory) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => resolve(factory)));
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    loadAndCompile(type) {
        return this.compiler.compileModuleAsync(type);
    }
}
ModuleMapNgFactoryLoader.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ModuleMapNgFactoryLoader, factory: function ModuleMapNgFactoryLoader_Factory(t) { return new (t || ModuleMapNgFactoryLoader)(ɵngcc0.ɵɵinject(Compiler), ɵngcc0.ɵɵinject(MODULE_MAP)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ModuleMapNgFactoryLoader, [{
        type: Injectable
    }], function () { return [{ type: Compiler }, { type: undefined, decorators: [{
                type: Inject,
                args: [MODULE_MAP]
            }] }]; }, { constructor: [], compiler: [], moduleMap: [], load: [], loadFactory: [], loadAndCompile: [] });
/** @nocollapse */
ModuleMapNgFactoryLoader.ctorParameters = () => [
    { type: Compiler },
    { type: undefined, decorators: [{ type: Inject, args: [MODULE_MAP,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModuleMapNgFactoryLoader.prototype.compiler;
    /**
     * @type {?}
     * @private
     */
    ModuleMapNgFactoryLoader.prototype.moduleMap;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL0FsdmFyby9zb3VyY2UvcmVwb3MvQXJxdWlNYWNfSGlzdG9yeS9BcnF1aU1hY19IaXN0b3J5L0NsaWVudEFwcC9ub2RlX21vZHVsZXMvQG5ndW5pdmVyc2FsL21vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci9lc20yMDE1L3NyYy9tb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBZ0RDLHNIQUdDIiwiZmlsZSI6Im1vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBJbmplY3QsIENvbXBpbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIFRva2VuIHVzZWQgYnkgdGhlIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlciB0byBsb2FkIG1vZHVsZXNcbiAqIEB0eXBlIHs/fVxuICovXG5leHBvcnQgY29uc3QgTU9EVUxFX01BUCA9IG5ldyBJbmplY3Rpb25Ub2tlbignTU9EVUxFX01BUCcpO1xuLyoqXG4gKiBOZ01vZHVsZUZhY3RvcnlMb2FkZXIgd2hpY2ggZG9lcyBub3QgbGF6eSBsb2FkXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29tcGlsZXJcbiAgICAgKiBAcGFyYW0gez99IG1vZHVsZU1hcFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbXBpbGVyLCBtb2R1bGVNYXApIHtcbiAgICAgICAgdGhpcy5jb21waWxlciA9IGNvbXBpbGVyO1xuICAgICAgICB0aGlzLm1vZHVsZU1hcCA9IG1vZHVsZU1hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBsb2FkQ2hpbGRyZW5TdHJpbmdcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGxvYWQobG9hZENoaWxkcmVuU3RyaW5nKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgY29uc3Qgb2ZmbGluZU1vZGUgPSB0aGlzLmNvbXBpbGVyIGluc3RhbmNlb2YgQ29tcGlsZXI7XG4gICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMubW9kdWxlTWFwW2xvYWRDaGlsZHJlblN0cmluZ107XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2xvYWRDaGlsZHJlblN0cmluZ30gZGlkIG5vdCBleGlzdCBpbiB0aGUgTU9EVUxFX01BUGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZmZsaW5lTW9kZSA/XG4gICAgICAgICAgICB0aGlzLmxvYWRGYWN0b3J5KCgvKiogQHR5cGUgez99ICovICh0eXBlKSkpIDogdGhpcy5sb2FkQW5kQ29tcGlsZSgoLyoqIEB0eXBlIHs/fSAqLyAodHlwZSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0gez99IGZhY3RvcnlcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGxvYWRGYWN0b3J5KGZhY3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgvKipcbiAgICAgICAgICogQHBhcmFtIHs/fSByZXNvbHZlXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICByZXNvbHZlID0+IHJlc29sdmUoZmFjdG9yeSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0gez99IHR5cGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGxvYWRBbmRDb21waWxlKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZXIuY29tcGlsZU1vZHVsZUFzeW5jKHR5cGUpO1xuICAgIH1cbn1cbk1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlci5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9XG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5Nb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBDb21waWxlciB9LFxuICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtNT0RVTEVfTUFQLF0gfV0gfVxuXTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyLnByb3RvdHlwZS5jb21waWxlcjtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlci5wcm90b3R5cGUubW9kdWxlTWFwO1xufVxuIl19