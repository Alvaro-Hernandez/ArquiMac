import * as tslib_1 from "tslib";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgModule, NgModuleFactoryLoader } from '@angular/core';
import { ModuleMapNgFactoryLoader, MODULE_MAP } from './module-map-ngfactory-loader';
/**
 * Helper function for getting the providers object for the MODULE_MAP
 *
 * @param moduleMap Map to use as a value for MODULE_MAP
 */
import * as ɵngcc0 from '@angular/core';
export function provideModuleMap(moduleMap) {
    return {
        provide: MODULE_MAP,
        useValue: moduleMap
    };
}
/**
 * Module for using a NgModuleFactoryLoader which does not lazy load
 */
var ModuleMapLoaderModule = /** @class */ (function () {
    function ModuleMapLoaderModule() {
    }
    ModuleMapLoaderModule_1 = ModuleMapLoaderModule;
    /**
     * Returns a ModuleMapLoaderModule along with a MODULE_MAP
     *
     * @param moduleMap Map to use as a value for MODULE_MAP
     */
    ModuleMapLoaderModule.withMap = function (moduleMap) {
        return {
            ngModule: ModuleMapLoaderModule_1,
            providers: [
                {
                    provide: MODULE_MAP,
                    useValue: moduleMap
                }
            ]
        };
    };
    var ModuleMapLoaderModule_1;
ModuleMapLoaderModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: ModuleMapLoaderModule });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ModuleMapLoaderModule, [{
        type: NgModule,
        args: [{
                providers: [
                    {
                        provide: NgModuleFactoryLoader,
                        useClass: ModuleMapNgFactoryLoader
                    }
                ]
            }]
    }], function () { return []; }, null);
ModuleMapLoaderModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function ModuleMapLoaderModule_Factory(t) { return new (t || ModuleMapLoaderModule)(); }, providers: [
        {
            provide: NgModuleFactoryLoader,
            useClass: ModuleMapNgFactoryLoader
        }
    ] });
    return ModuleMapLoaderModule;
}());
export { ModuleMapLoaderModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL0FsdmFyby9zb3VyY2UvcmVwb3MvQXJxdWlNYWNfSGlzdG9yeS9BcnF1aU1hY19IaXN0b3J5L0NsaWVudEFwcC9ub2RlX21vZHVsZXMvQG5ndW5pdmVyc2FsL21vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci9lc201L3NyYy9tb2R1bGUtbWFwLWxvYWRlci5tb2R1bGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NBNkJnQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBVUYiLCJmaWxlIjoibW9kdWxlLW1hcC1sb2FkZXIubW9kdWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgTmdNb2R1bGUsIE5nTW9kdWxlRmFjdG9yeUxvYWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyLCBNT0RVTEVfTUFQIH0gZnJvbSAnLi9tb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXInO1xuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIHByb3ZpZGVycyBvYmplY3QgZm9yIHRoZSBNT0RVTEVfTUFQXG4gKlxuICogQHBhcmFtIG1vZHVsZU1hcCBNYXAgdG8gdXNlIGFzIGEgdmFsdWUgZm9yIE1PRFVMRV9NQVBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVNb2R1bGVNYXAobW9kdWxlTWFwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvdmlkZTogTU9EVUxFX01BUCxcbiAgICAgICAgdXNlVmFsdWU6IG1vZHVsZU1hcFxuICAgIH07XG59XG4vKipcbiAqIE1vZHVsZSBmb3IgdXNpbmcgYSBOZ01vZHVsZUZhY3RvcnlMb2FkZXIgd2hpY2ggZG9lcyBub3QgbGF6eSBsb2FkXG4gKi9cbnZhciBNb2R1bGVNYXBMb2FkZXJNb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kdWxlTWFwTG9hZGVyTW9kdWxlKCkge1xuICAgIH1cbiAgICBNb2R1bGVNYXBMb2FkZXJNb2R1bGVfMSA9IE1vZHVsZU1hcExvYWRlck1vZHVsZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgTW9kdWxlTWFwTG9hZGVyTW9kdWxlIGFsb25nIHdpdGggYSBNT0RVTEVfTUFQXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbW9kdWxlTWFwIE1hcCB0byB1c2UgYXMgYSB2YWx1ZSBmb3IgTU9EVUxFX01BUFxuICAgICAqL1xuICAgIE1vZHVsZU1hcExvYWRlck1vZHVsZS53aXRoTWFwID0gZnVuY3Rpb24gKG1vZHVsZU1hcCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IE1vZHVsZU1hcExvYWRlck1vZHVsZV8xLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBNT0RVTEVfTUFQLFxuICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZTogbW9kdWxlTWFwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIE1vZHVsZU1hcExvYWRlck1vZHVsZV8xO1xuICAgIE1vZHVsZU1hcExvYWRlck1vZHVsZSA9IE1vZHVsZU1hcExvYWRlck1vZHVsZV8xID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgTmdNb2R1bGUoe1xuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBOZ01vZHVsZUZhY3RvcnlMb2FkZXIsXG4gICAgICAgICAgICAgICAgICAgIHVzZUNsYXNzOiBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pXG4gICAgXSwgTW9kdWxlTWFwTG9hZGVyTW9kdWxlKTtcbiAgICByZXR1cm4gTW9kdWxlTWFwTG9hZGVyTW9kdWxlO1xufSgpKTtcbmV4cG9ydCB7IE1vZHVsZU1hcExvYWRlck1vZHVsZSB9O1xuIl19