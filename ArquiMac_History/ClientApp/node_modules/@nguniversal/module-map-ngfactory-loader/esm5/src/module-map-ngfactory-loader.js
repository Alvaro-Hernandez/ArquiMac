import * as tslib_1 from "tslib";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, InjectionToken, Inject, Compiler } from '@angular/core';
/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 */
import * as ɵngcc0 from '@angular/core';
export var MODULE_MAP = new InjectionToken('MODULE_MAP');
/**
 * NgModuleFactoryLoader which does not lazy load
 */
var ModuleMapNgFactoryLoader = /** @class */ (function () {
    function ModuleMapNgFactoryLoader(compiler, moduleMap) {
        this.compiler = compiler;
        this.moduleMap = moduleMap;
    }
    ModuleMapNgFactoryLoader.prototype.load = function (loadChildrenString) {
        var offlineMode = this.compiler instanceof Compiler;
        var type = this.moduleMap[loadChildrenString];
        if (!type) {
            throw new Error(loadChildrenString + " did not exist in the MODULE_MAP");
        }
        return offlineMode ?
            this.loadFactory(type) : this.loadAndCompile(type);
    };
    ModuleMapNgFactoryLoader.prototype.loadFactory = function (factory) {
        return new Promise(function (resolve) { return resolve(factory); });
    };
    ModuleMapNgFactoryLoader.prototype.loadAndCompile = function (type) {
        return this.compiler.compileModuleAsync(type);
    };
    ModuleMapNgFactoryLoader = tslib_1.__decorate([
        tslib_1.__param(1, Inject(MODULE_MAP)),
        tslib_1.__metadata("design:paramtypes", [Compiler, Object])
    ], ModuleMapNgFactoryLoader);
ModuleMapNgFactoryLoader.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ModuleMapNgFactoryLoader, factory: function ModuleMapNgFactoryLoader_Factory(t) { return new (t || ModuleMapNgFactoryLoader)(ɵngcc0.ɵɵinject(Compiler), ɵngcc0.ɵɵinject(MODULE_MAP)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ModuleMapNgFactoryLoader, [{
        type: Injectable
    }], function () { return [{ type: Compiler }, { type: Object, decorators: [{
                type: Inject,
                args: [MODULE_MAP]
            }] }]; }, { compiler: [], moduleMap: [], load: [], loadFactory: [], loadAndCompile: [] });
    return ModuleMapNgFactoryLoader;
}());
export { ModuleMapNgFactoryLoader };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL0FsdmFyby9zb3VyY2UvcmVwb3MvQXJxdWlNYWNfSGlzdG9yeS9BcnF1aU1hY19IaXN0b3J5L0NsaWVudEFwcC9ub2RlX21vZHVsZXMvQG5ndW5pdmVyc2FsL21vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci9lc201L3NyYy9tb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21EQXdCbUQsQUFDOUI7Ozs7Ozs7Ozs7c0dBR1kiLCJmaWxlIjoibW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdCwgQ29tcGlsZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogVG9rZW4gdXNlZCBieSB0aGUgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyIHRvIGxvYWQgbW9kdWxlc1xuICovXG5leHBvcnQgdmFyIE1PRFVMRV9NQVAgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ01PRFVMRV9NQVAnKTtcbi8qKlxuICogTmdNb2R1bGVGYWN0b3J5TG9hZGVyIHdoaWNoIGRvZXMgbm90IGxhenkgbG9hZFxuICovXG52YXIgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlcihjb21waWxlciwgbW9kdWxlTWFwKSB7XG4gICAgICAgIHRoaXMuY29tcGlsZXIgPSBjb21waWxlcjtcbiAgICAgICAgdGhpcy5tb2R1bGVNYXAgPSBtb2R1bGVNYXA7XG4gICAgfVxuICAgIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChsb2FkQ2hpbGRyZW5TdHJpbmcpIHtcbiAgICAgICAgdmFyIG9mZmxpbmVNb2RlID0gdGhpcy5jb21waWxlciBpbnN0YW5jZW9mIENvbXBpbGVyO1xuICAgICAgICB2YXIgdHlwZSA9IHRoaXMubW9kdWxlTWFwW2xvYWRDaGlsZHJlblN0cmluZ107XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGxvYWRDaGlsZHJlblN0cmluZyArIFwiIGRpZCBub3QgZXhpc3QgaW4gdGhlIE1PRFVMRV9NQVBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mZmxpbmVNb2RlID9cbiAgICAgICAgICAgIHRoaXMubG9hZEZhY3RvcnkodHlwZSkgOiB0aGlzLmxvYWRBbmRDb21waWxlKHR5cGUpO1xuICAgIH07XG4gICAgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyLnByb3RvdHlwZS5sb2FkRmFjdG9yeSA9IGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gcmVzb2x2ZShmYWN0b3J5KTsgfSk7XG4gICAgfTtcbiAgICBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIucHJvdG90eXBlLmxvYWRBbmRDb21waWxlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZXIuY29tcGlsZU1vZHVsZUFzeW5jKHR5cGUpO1xuICAgIH07XG4gICAgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5qZWN0YWJsZSgpLFxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMSwgSW5qZWN0KE1PRFVMRV9NQVApKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0NvbXBpbGVyLCBPYmplY3RdKVxuICAgIF0sIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlcik7XG4gICAgcmV0dXJuIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlcjtcbn0oKSk7XG5leHBvcnQgeyBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIgfTtcbiJdfQ==